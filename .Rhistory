setwd("D:/Data Analysis")
independent variables (dropping ID variables)
#
localH2O <- h2o.init(nthreads = -1)
#install all required packages
install.packages("data.table")
install.packages("ggplot2")
install.packages("gmodels")
install.packages("dummies")
install.packages("h2o")
#load all required packages
library(data.table)
library(ggplot2)
library(gmodels)
library(dummies)
library(h2o)
#load data using fread
train <- fread("train.csv", stringsAsFactors = T)
test <- fread("test.csv", stringsAsFactors = T)
#No. of rows and columns in Train
dim(train)
#No. of rows and columns in Test
dim(test)
str(train)
#first prediction using mean
sub_mean <- data.frame(User_ID = test$User_ID, Product_ID = test$Product_ID, Purchase = mean(train$Purchase))
write.csv(sub_mean, file = "first_sub.csv", row.names = F)
summary (train)
summary (test)
#combine data set
test[,Purchase := mean(train$Purchase)]
c <- list(train, test)
combin <- rbindlist(c)
#analyzing gender variable
combin[,prop.table(table(Gender))] Gender
#Age Variable
combin[,prop.table(table(Age))]
#City Category Variable
combin[,prop.table(table(City_Category))]
#Stay in Current Years Variable
combin[,prop.table(table(Stay_In_Current_City_Years))]
#unique values in ID variables
length(unique(combin$Product_ID))
length(unique(combin$User_ID))
#missing values
colSums(is.na(combin))
#Age vs Gender
ggplot(combin, aes(Age, fill = Gender)) + geom_bar()
#Age vs City_Category
ggplot(combin, aes(Age, fill = City_Category)) + geom_bar()
#Show CrossTable of Occupation by City_Category
CrossTable(combin$Occupation, combin$City_Category)
#create a new variable for missing values
combin[,Product_Category_2_NA := ifelse(sapply(combin$Product_Category_2, is.na) ==    TRUE,1,0)]
combin[,Product_Category_3_NA := ifelse(sapply(combin$Product_Category_3, is.na) ==  TRUE,1,0)]
#impute missing values
combin[,Product_Category_2 := ifelse(is.na(Product_Category_2) == TRUE, "-999",  Product_Category_2)]
combin[,Product_Category_3 := ifelse(is.na(Product_Category_3) == TRUE, "-999",  Product_Category_3)]
#set column level
levels(combin$Stay_In_Current_City_Years)[levels(combin$Stay_In_Current_City_Years) ==  "4+"] <- "4"
#recoding age groups
levels(combin$Age)[levels(combin$Age) == "0-17"] <- 0
levels(combin$Age)[levels(combin$Age) == "18-25"] <- 1
levels(combin$Age)[levels(combin$Age) == "26-35"] <- 2
levels(combin$Age)[levels(combin$Age) == "36-45"] <- 3
levels(combin$Age)[levels(combin$Age) == "46-50"] <- 4
levels(combin$Age)[levels(combin$Age) == "51-55"] <- 5
levels(combin$Age)[levels(combin$Age) == "55+"] <- 6
#convert age to numeric
combin$Age <- as.numeric(combin$Age)
#convert Gender into numeric
combin[, Gender := as.numeric(as.factor(Gender)) - 1]
#User Count
combin[, User_Count := .N, by = User_ID]
#Product Count
combin[, Product_Count := .N, by = Product_ID]
#Mean Purchase of Product
combin[, Mean_Purchase_Product := mean(Purchase), by = Product_ID]
#Mean Purchase of User
combin[, Mean_Purchase_User := mean(Purchase), by = User_ID]
#Adding dummies to City_Category
combin <- dummy.data.frame(combin, names = c("City_Category"), sep = "_")
#check classes of all variables
sapply(combin, class)
#converting Product Category 2 & 3
combin$Product_Category_2 <- as.integer(combin$Product_Category_2)
combin$Product_Category_3 <- as.integer(combin$Product_Category_3)
#Divide into train and test
c.train <- combin[1:nrow(train),]
c.test <- combin[-(1:nrow(train)),]
c.train <- c.train[c.train$Product_Category_1 <= 18,]
localH2O <- h2o.init(nthreads = -1)
localH2O <- h2o.init(nthreads = -1)
h2o.init()
train.h2o <- as.h2o(c.train)
test.h2o <- as.h2o(c.test)
colnames(train.h2o)
y.dep <- 14
x.indep <- c(3:13,15:20)
regression.model <- h2o.glm( y = y.dep, x = x.indep, training_frame = train.h2o, family = "gaussian")
h2o.performance(regression.model)
predict.reg <- as.data.frame(h2o.predict(regression.model, test.h2o))
sub_reg <- data.frame(User_ID = test$User_ID, Product_ID = test$Product_ID, Purchase =  predict.reg$predict)
sub_reg
View(sub_reg)
system.time(
rforest.model <- h2o.randomForest(y=y.dep, x=x.indep, training_frame = train.h2o, ntrees = 1000, mtries = 3, max_depth = 4, seed = 1122)
)
h2o.performance(rforest.model)
h2o.varimp(rforest.model)
system.time(predict.rforest <- as.data.frame(h2o.predict(rforest.model, test.h2o)))
sub_rf <- data.frame(User_ID = test$User_ID, Product_ID = test$Product_ID, Purchase =  predict.rforest$predict)
sub_rf
View(sub_rf)
system.time(
gbm.model <- h2o.gbm(y=y.dep, x=x.indep, training_frame = train.h2o, ntrees = 1000, max_depth = 4, learn_rate = 0.01, seed = 1122)
)
predict.gbm <- as.data.frame(h2o.predict(gbm.model, test.h2o))
sub_gbm <- data.frame(User_ID = test$User_ID, Product_ID = test$Product_ID, Purchase = predict.gbm$predict)
sub_gbm
system.time(
dlearning.model <- h2o.deeplearning(y = y.dep,
x = x.indep,
training_frame = train.h2o,
epoch = 60,
hidden = c(100,100),
activation = "Rectifier",
seed = 1122
)
)
h2o.performance(dlearning.model)
predict.dl2 <- as.data.frame(h2o.predict(dlearning.model, test.h2o))
sub_dlearning <- data.frame(User_ID = test$User_ID, Product_ID = test$Product_ID, Purchase = predict.dl2$predict)
write.csv(sub_dlearning, file = "sub_dlearning_new.csv", row.names = F)
